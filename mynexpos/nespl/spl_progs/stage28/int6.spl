// INT6 READ SYSTEM CALL

// Changing the SP from user stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+(5*CORE)+1] * 16 + 13] = SP;
SP = [(PROCESS_TABLE+[SYSTEM_STATUS_TABLE+(5*CORE)+1]*16)+11]*512 - 1;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

alias userSP R1;
alias currentPid R2;
alias returnVal R11;

userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+(5*CORE)+1] * 16 + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+(5*CORE)+1]*16 + 9] = 7;
currentPid = [SYSTEM_STATUS_TABLE+(5*CORE)+1];


alias fileDescriptor R3;
alias word R4;

fileDescriptor = [([PTBR+2*((userSP-4)/512)]*512)+((userSP-4)%512)];
word = [([PTBR+2*((userSP-3)/512)]*512)+((userSP-3)%512)];

// Terminal Read
if(fileDescriptor == -1) then

	multipush(R1,R2,R3,R4);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
	R3 = word;
	call DEVICE_MANAGER;
	multipop(R1,R2,R3,R4);

	returnVal = 0;
	goto returnLabel;
	
else
	
	// Check if file Descriptor is valid or not
	if((fileDescriptor<0)||(fileDescriptor>7)) then
		returnVal = -1;
		goto returnLabel;
	endif;
	
	alias resTable R5;
	resTable = ([PROCESS_TABLE+(currentPid*16)+11]*512) + RESOURCE_TABLE_OFFSET;
	
	// No File is Open with This File Descriptor
	if([resTable+(2*fileDescriptor)] != FILE) then
		returnVal = -1;
		goto returnLabel;
	endif;
	
	alias openFileIndex R6;
	alias inodeIndex R7;
	openFileIndex = [resTable+(2*fileDescriptor)+1];
	inodeIndex = [OPEN_FILE_TABLE+(4*openFileIndex)];
	
	// Acquire Inode Table
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
	R3 = inodeIndex;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	// Locking Fails
	if(R0 == -1) then
		returnVal = -1;
		goto returnLabel;
	endif;
	
	alias lseek R8;
	lseek = [OPEN_FILE_TABLE+(4*openFileIndex)+2];
	
	if(inodeIndex == INODE_ROOT) then
		if(lseek >= 480) then
			// Release Inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8);
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
			R3 = inodeIndex;
			call RESOURCE_MANAGER;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8);
		
			returnVal = -2;
			goto returnLabel;
		endif;
		
		[([PTBR+2*((word)/512)]*512)+((word)%512)] = [ROOT_FILE+lseek];
		[OPEN_FILE_TABLE+(4*openFileIndex)+2]=[OPEN_FILE_TABLE+(4*openFileIndex)+2]+1;
		// breakpoint;
		
	else
		// End of the file reached
		if(lseek >= [INODE_TABLE+(16*inodeIndex)+2]) then
			// Release Inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8);
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
			R3 = inodeIndex;
			call RESOURCE_MANAGER;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8);
			
			returnVal = -2;
			goto returnLabel;
		endif;
		
		// Buffered Read
		multipush(R1,R2,R3,R4,R5,R6,R7,R8);
		R1 = 2;
		R2 = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
		R3 = [INODE_TABLE+(16*inodeIndex)+8+(lseek/512)];
		R5 = word;
		R4 = lseek%512;
		call FILE_MANAGER;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	
		[OPEN_FILE_TABLE+(4*openFileIndex)+2]=[OPEN_FILE_TABLE+(4*openFileIndex)+2]+1;
		
	endif;

	// Release Inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
	R3 = inodeIndex;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);	
	
	returnVal = 0;
	goto returnLabel;
	
endif;



returnLabel:
	[([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512)] = returnVal;
	[PROCESS_TABLE+(currentPid*16)+9] = 0;
	
	R1 = RELEASE_LOCK;
  	R2 = KERN_LOCK;
  	call ACCESS_CONTROL;
  	
  	SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+(5*CORE)+1]*16 + 13];
  	
	ireturn;
