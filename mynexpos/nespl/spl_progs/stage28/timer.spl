// Switching the stack to kernel stack and saving the register content.
// breakpoint;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+(5*CORE)+1] * 16) + 13] = SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+(5*CORE)+1] * 16) + 11] * 512 - 1;

backup;

// Changing the state for current user process.
alias currentPID R0;
alias process_table_entry R1;
currentPID = [SYSTEM_STATUS_TABLE+(5*CORE)+1];
process_table_entry = PROCESS_TABLE + currentPID * 16;

// Swapping is initialized
if(([SYSTEM_STATUS_TABLE+5]!=0)&&(CORE == PRIMARY_CORE)) then
	
	multipush(R0,R1);
	R1 = ACQUIRE_KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R0,R1);
	
	// Current process swapper daemon and paging status is swap out
	if((currentPID==15)&&([SYSTEM_STATUS_TABLE+5]==SWAP_OUT)) then
		multipush(R0,R1);
		R1 = 1;
		R2 = currentPID;
		call PAGER_MODULE;
		multipop(R0,R1);
	endif;
	
	// Current process swapper daemon and paging status is swap in
	if((currentPID==15)&&([SYSTEM_STATUS_TABLE+5]==SWAP_IN)) then
		multipush(R0,R1);
		R1 = 2;
		R2 = currentPID;
		call PAGER_MODULE;
		multipop(R0,R1);
	endif;	
	
	multipush(R0,R1,R2);
	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R0,R1,R2);
	
	// Swapping ongoing but daemon is blocked for disk operation and idle is run now
	if(currentPID == 0) then
		goto contextSwitch;
	endif;


//	Swapping is not on now. Checking whether it must be initiated
else
	if(CORE == PRIMARY_CORE) then	
		if([SYSTEM_STATUS_TABLE+2] < MEM_LOW) then
			// Swap Out to be invoked during next timer interrupt
			[SYSTEM_STATUS_TABLE+5]=SWAP_OUT;
	
		else
			// There are swapped out processes
			if([SYSTEM_STATUS_TABLE+4] > 0) then	
	
				if([SYSTEM_STATUS_TABLE+2] > MEM_HIGH) then
					// Swap In to be invoked during next timer interrupt
					[SYSTEM_STATUS_TABLE+5]=SWAP_IN;
		
				else
					alias count R2;
					count = 3;
					while(count < MAX_PROC_NUM) do
						if([PROCESS_TABLE+(16*count)+6]==1)&&([PROCESS_TABLE+(16*count)]>MAX_TICK) then
							[SYSTEM_STATUS_TABLE+5] = SWAP_IN;
						endif;
						count = count + 1;
					endwhile;
				endif;
			endif;
		endif;
	endif;
endif;


contextSwitch:

[process_table_entry + 4] = READY;
alias iter R2;
iter = 0;
while(iter < 16) do
	if([PROCESS_TABLE + iter*16 + 4] != TERMINATED) then
		[PROCESS_TABLE + iter*16] = [PROCESS_TABLE + iter*16] + 1;
	endif;
	iter = iter + 1;
endwhile;

// Invoking context switch module.
call SCHEDULER;

// Restoring the content of register
restore;

// Restoring the user SP saved in the process table entry of new process.
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+(5*CORE)+1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+(5*CORE)+1] * 16) + 9] = 0;
// breakpoint;
ireturn;
