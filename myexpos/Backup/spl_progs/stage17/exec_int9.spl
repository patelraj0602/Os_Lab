alias userSP R0;
userSP = SP;

// Changing the SP from user stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = userSP;

// Setting the MODE value in the process table.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;
SP = [(PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16)+11]*512-1;

// Calcuating the physical address of the first argument of the user stack because in kernel  
// mode the virtual address won't be converted into physical address.
alias fileName R1;
fileName = [([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + ((userSP - 4) % 512)];

// Checking whether the file is present in inode table.
alias address R3;
alias inodeIndex R2;
inodeIndex = 0;

while(inodeIndex < MAX_FILE_NUM) do	
	address = (INODE_TABLE)+(inodeIndex*16);
	if(([address+1]==fileName)&&([address]==EXEC)) then
		break;
	endif;
	inodeIndex = inodeIndex + 1;
endwhile;

// print(inodeIndex);

if(inodeIndex == MAX_FILE_NUM) then
	// Return -1
	alias physicalAddrRetVal R4;
	physicalAddrRetVal = ([PTBR + 2*(userSP-1)/512]*512) + ((userSP-1)%512);
	[physicalAddrRetVal] = -1;
	
	// Changing the value of mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	
	// Changing kernel flag to user flag
	SP = userSP;
	
	ireturn;
endif;


// Storing the inode index.
inodeIndex = inodeIndex;

breakpoint;

// Call exit process from process manager module
multipush(R0,R1,R2);
R1 = 3;											// Function number
R2 = [SYSTEM_STATUS_TABLE + 1]; 				// Current process PID
call PROCESS_MANAGER;
multipop(R0,R1,R2);

breakpoint;

// Reclaiming the user area page again
alias userAreaPage R3;
userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

breakpoint;

SP = userAreaPage * 512;
[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16 + 7] = inodeIndex;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = RUNNING;

breakpoint;

// Allocating new page and seting up page table entries

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

multipush(R0,R1,R2,R3);

// Heap
R1 = 1;
call MEMORY_MANAGER;
[PTBR+4] = R0;
[PTBR+5] = "0110";

R1 = 1;
call MEMORY_MANAGER;
[PTBR+6] = R0;
[PTBR+7] = "0110";

// Stack
R1 = 1;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";

R1 = 1;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";

multipop(R0,R1,R2,R3);

breakpoint;

// Code
alias noOfCodePages R4;
alias count R5;
count = 0;
noOfCodePages = (([INODE_TABLE+(inodeIndex*16)+2]-1)/512)+1;

// print(noOfCodePages);

// Allocating space for code section.
while(count < 4) do
	if(count < noOfCodePages) then
		multipush(R0,R1,R2,R3,R4,R5);
		R1 = 1;
		call MEMORY_MANAGER;
		[PTBR+8+(2*count)] = R0;
		[PTBR+9+(2*count)] = "0100";
		multipop(R0,R1,R2,R3,R4,R5);
		
	else
		[PTBR+8+(2*count)] = -1;
		[PTBR+9+(2*count)] = "0000";
	endif;
	count = count + 1;
endwhile;

breakpoint;

// Copying code blocks from inode table to page table of this newly created process.
count = 0;
while(count < noOfCodePages) do
	loadi([PTBR+8+(2*count)], [INODE_TABLE+(inodeIndex*16)+8+count]);
	count = count + 1;
endwhile;


[[PTBR + 16]*512] = [[PTBR+8]*512 + 1];
SP = 8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

breakpoint;

ireturn;



