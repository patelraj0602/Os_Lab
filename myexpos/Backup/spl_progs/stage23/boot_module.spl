// Loading Process Manager module(mod1)
loadi(42,55);
loadi(43,56);

// Loading Memory Manager module(mod2)
loadi(44,57);
loadi(45,58);

// Loading INT9 exec system call routine
loadi(20,33);
loadi(21,34);

// Loading Console interrupt handler
loadi(8,21);
loadi(9,22);

// Loading interrupt INT6 module to memory
loadi(14,27);
loadi(15,28);

// Loading resource manager module to memory.
loadi(40,53);
loadi(41,54);

// Loading device manager module to memory
loadi(48,61);
loadi(49,62);

// Loading the Scheduler Module into memory
loadi(50,63);
loadi(51,64);

// Loading the INT7 software interrupt service code.
loadi(16,29);
loadi(17,30); 

// Loading timer interrupt code
loadi(4, 17);
loadi(5, 18);

// For loading library code to memory
loadi(63,13);
loadi(64,14);

// For loading init code to memory
loadi(65,7);
loadi(66,8);

// For loading INT10 module to memory
loadi(22,35);
loadi(23,36);

// For loading exception handler routine to memory
loadi(2, 15);
loadi(3, 16);

// Loading inodetable
loadi(59, 3);
loadi(60, 4);

// Loading Disk Controller Interrupt
loadi(6, 19);
loadi(7, 20);

// Loading Disk Free List
loadi(61, 2);

// Loading INT8 fork system call
loadi(18, 31);
loadi(19, 32);

// Loading INT11 for wait,signal,getpid,getppid system call
loadi(24, 37);
loadi(25, 38);

// Loading INT15 shutdown system call 
loadi(32, 45);
loadi(33, 46);

// Loading INT13 Semget and Semrelease system call
loadi(28, 41);
loadi(29, 42);

// Loading INT14 Semlock and SemUnlock system call
loadi(30, 43);
loadi(31, 44);

// Loading INT4 Create and Delete file system call
loadi(10, 23);
loadi(11, 24);


// page 0-75   => For Loading OS serices
// page 76-82  => Used by idle and init intialization
// page 83-127 => Empty 
alias count R0;
count = 0;
while(count <= 127) do
	if(count <= 82) then
		[MEMORY_FREE_LIST+count]=1;
	else
		[MEMORY_FREE_LIST+count]=0;
	endif;
	count = count + 1;
endwhile;

// Initialize Semaphore Table
count = 0;
while(count < 32) do
	[SEMAPHORE_TABLE+(4*count)] = -1;
	[SEMAPHORE_TABLE+(4*count)+1] = 0;
	count = count + 1;
endwhile;

// Initializing File Status Table
count = 0;
while(count < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE+(4*count)] = -1;
	[FILE_STATUS_TABLE+(4*count)+1] = -1;
	count = count + 1; 
endwhile;


// Initializing Buffer Table
count = 0;
while(count < MAX_BUFFER) do
	[BUFFER_TABLE+(count*4)] = -1;
	[BUFFER_TABLE+(count*4)+1] = 0;
	[BUFFER_TABLE+(count*4)+2] = -1;
	count = count + 1;
endwhile;


// Setting up page table for Init process

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// Making Entries in Process Table for init process
[PROCESS_TABLE + 16 + 1] = 1;					// PID
[PROCESS_TABLE + 16 + 11] = 80;					// User Page Area
[PROCESS_TABLE + 16 + 13] = 8*512;				// UPTR field
[PROCESS_TABLE + 16 + 12] = 0;					// KPRT field
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE+20;	// PTBR
[PROCESS_TABLE + 16 + 15] = 10;					// PTLR
[PROCESS_TABLE + 16 + 4] = CREATED;				// State
[PROCESS_TABLE + 16 + 3] = 1;					// userid set to ROOT

// Initializing disk map table for init process
[DISK_MAP_TABLE + 10*1 + 2] = -1;
[DISK_MAP_TABLE + 10*1 + 3] = -1;
[DISK_MAP_TABLE + 10*1 + 4] = 7;
[DISK_MAP_TABLE + 10*1 + 5] = 8;
[DISK_MAP_TABLE + 10*1 + 6] = -1;
[DISK_MAP_TABLE + 10*1 + 7] = -1;
[DISK_MAP_TABLE + 10*1 + 8] = -1;
[DISK_MAP_TABLE + 10*1 + 9] = -1;

// Setting entry point for init process to the top of stack.
[76 * 512] = [65 * 512 + 1];

// Per-process resource table for init process(It uses the last 16 words of user area page)
count = 1;
while(count <= 8) do
	[(81*512)-(2*count)] = -1;
	count = count + 1;
endwhile;


// Setting the state field of all the other entries of process table to terminated.
alias current R0;
current = 2;
while(current <= 15) do
	[PROCESS_TABLE + (16 * current) + 4] = TERMINATED;
	current = current + 1;
endwhile;

// Initializing some data structures.
[DISK_STATUS_TABLE] = 0;
[TERMINAL_STATUS_TABLE] = 0;
[SYSTEM_STATUS_TABLE+2] = 45;
[SYSTEM_STATUS_TABLE+3] = 0;

// breakpoint;
return;
