// print("Exec");
// breakpoint;

alias userSP R0;
userSP = SP;

// Changing the SP from user stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = userSP;

// Setting the MODE value in the process table.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;
SP = [(PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16)+11]*512-1;

// Calcuating the physical address of the first argument of the user stack because in kernel  
// mode the virtual address won't be converted into physical address.
alias fileName R1;
fileName = [([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + ((userSP - 4) % 512)];

// Checking whether the file is present in inode table.
alias address R3;
alias inodeIndex R2;
inodeIndex = 0;

while(inodeIndex < MAX_FILE_NUM) do	
	address = (INODE_TABLE)+(inodeIndex*16);
	if(([address+1]==fileName)&&([address]==EXEC)) then
		break;
	endif;
	inodeIndex = inodeIndex + 1;
endwhile;


if(inodeIndex == MAX_FILE_NUM) then
	// Return -1
	alias physicalAddrRetVal R4;
	physicalAddrRetVal = ([PTBR + 2*(userSP-1)/512]*512) + ((userSP-1)%512);
	[physicalAddrRetVal] = -1;
	
	// Changing the value of mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	
	// Changing kernel flag to user flag
	SP = userSP;
	
	ireturn;
endif;


// Storing the inode index.
inodeIndex = inodeIndex;

// breakpoint;

// Call exit process from process manager module
multipush(R0,R1,R2);
R1 = 3;							// Function number
R2 = [SYSTEM_STATUS_TABLE + 1]; 				// Current process PID
call PROCESS_MANAGER;
multipop(R0,R1,R2);

// breakpoint;

// Reclaiming the user area page again
alias userAreaPage R3;
userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

//breakpoint;

SP = userAreaPage * 512;
[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16 + 7] = inodeIndex;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = RUNNING;

// breakpoint;

// Allocating new page and seting up page table entries

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Stack
multipush(R0,R1,R2,R3);

R1 = 1;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";

R1 = 1;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";

multipop(R0,R1,R2,R3);

// breakpoint;

// Code 
multipush(R0,R1,R2,R3);
R1 = 5;								//function number
R2 = [INODE_TABLE+(inodeIndex*16)+8];				// Block number
call MEMORY_MANAGER;
[PTBR+8] = R0;
[PTBR+9] = "0100";
multipop(R0,R1,R2,R3);

[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


// breakpoint;

// Initializing the disk map table
alias count R4;
alias numberofBlocks R5;
count = 2;
numberofBlocks = (([INODE_TABLE+(16*inodeIndex)+2]-1)/512) + 1;
while(count < 10) do
	if((count >= 4) && (count < 4+numberofBlocks)) then
		[DISK_MAP_TABLE+([SYSTEM_STATUS_TABLE+1]*10)+count] = [INODE_TABLE+(inodeIndex*16)+8+(count-4)];
	else
		[DISK_MAP_TABLE+([SYSTEM_STATUS_TABLE+1]*10)+count] = -1;
	endif;
	count = count + 1;
endwhile;

// breakpoint;

// Per-process resource table(It uses the last 16 words of user area page)
count = 1;
while(count <= 8) do
	[([PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]+1)*512 - (2*count)] = -1;
	count = count + 1;
endwhile;

[[PTBR + 16]*512] = [[PTBR+8]*512 + 1];
SP = 8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// breakpoint;

ireturn;



