// Changing the SP from user stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

// Setting the MODE value in the process table.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;
SP = [(PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16)+11]*512 - 1;

alias childPid R1;
alias parentPid R2;
alias userSP R3;
alias parentPageTable R4;

parentPid = [SYSTEM_STATUS_TABLE+1];
parentPageTable = [PROCESS_TABLE+(parentPid*16)+14];
userSP = [PROCESS_TABLE+(parentPid*16)+13];

multipush(R2,R3,R4);
R1 = 1;
call PROCESS_MANAGER;
childPid = R0;
multipop(R2,R3,R4);

// If Free Process table is not available
if(childPid == -1) then
	// Return -1;
	[([parentPageTable+2*((userSP-1)/512)]*512)+((userSP-1)%512)] = -1;
	[PROCESS_TABLE + (parentPid*16) + 9] = 0;
	SP = userSP;
	ireturn;
endif;

// print(childPid);

// If the heap pages are not allocated
if([parentPageTable+4] == -1) then
	// Allocate pages for heap
	
	multipush(R1,R2,R3,R4);
	R1 = 1;
	call MEMORY_MANAGER;
	multipop(R1,R2,R3,R4);
	[parentPageTable+4] = R0;
	[parentPageTable+5] = "0110";
	
	multipush(R1,R2,R3,R4);
	R1 = 1;
	call MEMORY_MANAGER;
	multipop(R1,R2,R3,R4);
	[parentPageTable+6] = R0;
	[parentPageTable+7] = "0110";

endif;

// print(childPid);

alias childPageTable R5; 
childPageTable = PAGE_TABLE_BASE+(childPid*20);

// Allocate 2 stack and 1 user area page for child process
multipush(R1,R2,R3,R4,R5);
R1 = 1;
call MEMORY_MANAGER;
multipop(R1,R2,R3,R4,R5);
[childPageTable+16] = R0;
[childPageTable+17] = "0110";

multipush(R1,R2,R3,R4,R5);
R1 = 1;
call MEMORY_MANAGER;
multipop(R1,R2,R3,R4,R5);
[childPageTable+18] = R0;
[childPageTable+19] = "0110";

multipush(R1,R2,R3,R4,R5);
R1 = 1;
call MEMORY_MANAGER;
multipop(R1,R2,R3,R4,R5);
[PROCESS_TABLE+(childPid*16)+11] = R0;

// Initialization of process table
[PROCESS_TABLE+(childPid*16)+0] = 0;
[PROCESS_TABLE+(childPid*16)+2] = parentPid;
[PROCESS_TABLE+(childPid*16)+3] = [PROCESS_TABLE+(parentPid*16)+3];
[PROCESS_TABLE+(childPid*16)+4] = CREATED;
[PROCESS_TABLE+(childPid*16)+6] = [PROCESS_TABLE+(parentPid*16)+6];
[PROCESS_TABLE+(childPid*16)+7] = [PROCESS_TABLE+(parentPid*16)+7];
[PROCESS_TABLE+(childPid*16)+9] = 0;
[PROCESS_TABLE+(childPid*16)+10] = [PROCESS_TABLE+(parentPid*16)+10];
[PROCESS_TABLE+(childPid*16)+12] = 0;
[PROCESS_TABLE+(childPid*16)+13] = [PROCESS_TABLE+(parentPid*16)+13];

// Copy entries of per process table of parent to child.
alias count R6;
count = 1;
while(count < 17) do
	[([PROCESS_TABLE+(childPid*16)+11]+1)*512-count]=[([PROCESS_TABLE+(parentPid*16)+11]+1)*512-count];
	count = count + 1;
endwhile;

// Copy entries of disk map table of parent to child.
count = 0;
while(count < 10) do
	[DISK_MAP_TABLE+(childPid*10)+count] = [DISK_MAP_TABLE+(parentPid*10)+count];
	count = count + 1; 
endwhile;


// Initialize the page table of the child process
count = 0;
while(count < 16) do
	[childPageTable+count] = [parentPageTable+count];
	if((count%2 == 0) && ([parentPageTable+count] != -1)) then
		[MEMORY_FREE_LIST+[parentPageTable+count]]=[MEMORY_FREE_LIST+[parentPageTable+count]]+1;
	endif;
	count = count + 1;
endwhile;

// Recall that stack and user area pages are already initialized above
// Copy the values in the stack pages exactly from parent process

count = 0;
while(count < 512) do 
	[([childPageTable+16]*512)+count] = [([parentPageTable+16]*512)+count];
	[([childPageTable+18]*512)+count] = [([parentPageTable+18]*512)+count];
	count = count + 1;
endwhile;

// Store the value in BP register on top of kernel stack of child process
[[PROCESS_TABLE+(childPid*16)+11]*512] = BP;

// Setup return values in user stack of parent and child processes
[([parentPageTable+2*((userSP-1)/512)]*512)+((userSP-1)%512)] = childPid;
[([childPageTable+2*((userSP-1)/512)]*512)+((userSP-1)%512)] = 0;

[PROCESS_TABLE + (parentPid*16) + 9] = 0;
SP = userSP;

// print("Fork Done");
// breakpoint;

ireturn;


















