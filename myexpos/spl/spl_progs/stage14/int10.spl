[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = TERMINATED;

alias currentPID R0;
alias flag R2;
alias newPID R3;
alias val R4;
alias state R5;

currentPID = [SYSTEM_STATUS_TABLE + 1]; 
flag = 0;
newPID = (currentPID+1);

while(newPID <= 16 + currentPID) do
	val = newPID % 16;
	state = [PROCESS_TABLE + (16 * val) + 4];
	if((val!=0)&&((state==READY)||(state==CREATED))) then
		flag=1;
		break;
	endif;
	newPID=newPID+1;
endwhile;

if(flag == 1) then
	newPID = newPID % 16;
else
	newPID = 0;
endif;

if(newPID == 0) then
	halt;
endif;

// Invoking context switch module.
call SCHEDULER;

// Restoring the content of register
restore;

// Restoring the user SP saved in the process table entry of new process.
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

ireturn;
