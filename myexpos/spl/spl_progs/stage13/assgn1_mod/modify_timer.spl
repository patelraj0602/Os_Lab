breakpoint;

// Switching the stack to kernel stack and saving the register content.
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
backup;


// Loading the PID values of the current process.
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

// Saving the KPTR, PTBR, PTLR values to the process table entry of current process
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY;


// Toggling between process
alias newPID R2;
newPID = (currentPID+1)%3;


// Restoring the values of register from process table for new process
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;


// For restoring the content of saved user context if this process was running earlier.
if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	breakpoint;
	ireturn;

// There are only 2 possible state here READY and RUNNING so we can do in this manner
else
	[new_process_table + 4] = RUNNING;
	restore;
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	breakpoint;
	ireturn;
endif;
